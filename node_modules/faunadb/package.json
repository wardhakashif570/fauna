{
  "_args": [
    [
      {
        "raw": "faunadb",
        "scope": null,
        "escapedName": "faunadb",
        "name": "faunadb",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\wardha\\Desktop\\Fauna"
    ]
  ],
  "_from": "faunadb",
  "_hasShrinkwrap": false,
  "_id": "faunadb@4.0.0",
  "_location": "/faunadb",
  "_nodeVersion": "12.16.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/faunadb_4.0.0_1605727963373_0.18333741843271723"
  },
  "_npmUser": {
    "name": "fauna-bot",
    "email": "fauna-bot@fauna.com"
  },
  "_npmVersion": "6.13.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "faunadb",
    "scope": null,
    "escapedName": "faunadb",
    "name": "faunadb",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/faunadb/-/faunadb-4.0.0.tgz",
  "_shasum": "5fd922b811bd40154e3b5234f39cac512f464f51",
  "_shrinkwrap": null,
  "_spec": "faunadb",
  "_where": "C:\\Users\\wardha\\Desktop\\Fauna",
  "bugs": {
    "url": "https://github.com/fauna/faunadb-js/issues"
  },
  "dependencies": {
    "abort-controller": "^3.0.0",
    "base64-js": "^1.2.0",
    "btoa-lite": "^1.0.0",
    "cross-fetch": "^3.0.6",
    "dotenv": "^8.2.0",
    "fn-annotate": "^1.1.3",
    "object-assign": "^4.1.0",
    "url-parse": "^1.4.7",
    "util-deprecate": "^1.0.2"
  },
  "description": "FaunaDB Javascript driver for Node.JS and Browsers",
  "devDependencies": {
    "browserify": "^16.2.2",
    "eslint": "^5.3.0",
    "eslint-config-prettier": "^6.5.0",
    "eslint-plugin-prettier": "^3.1.1",
    "husky": ">=1",
    "ink-docstrap": "^1.2.1",
    "jest": "^24.9.0",
    "jsdoc": "^3.6.3",
    "lint-staged": ">=8",
    "prettier": "1.18.2",
    "semantic-release": "^17.1.2",
    "terser": "^4.3.9",
    "typescript": "^3.0.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-tXiGthGdbInZ6hzdmGFxnxqsQe2mKq+pnOc+zHZYXtD8TDgKWpK0F9M0tmRpD0uoQUrBHzXU7hxE24pJJxPdbQ==",
    "shasum": "5fd922b811bd40154e3b5234f39cac512f464f51",
    "tarball": "https://registry.npmjs.org/faunadb/-/faunadb-4.0.0.tgz",
    "fileCount": 28,
    "unpackedSize": 851108,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJftXbbCRA9TVsSAnZWagAAV7EP/3EF4kYIzGnFwYqNdFLh\nsUbEe2Dq/ityIyYxvGLZ6cnW69HQjCPBQK0tmcttPm/hWc8M8WpgA5q6sHFd\nRJTIqaiTDrUVDFSyA8A7Cq4WSW3K2CTM9PdRDN/CvKxVJF7LNUvowjHveCmF\nyqrND2LMki8s2pWN4Tne4dCiAvKRHLciobeHoerH+Yud0tLxTlAGpijRhwhw\nmeGpcCaU5Q3wnq6wExL2gsGs1Zjccfuhgr/O1WswVsQy3OnpDbpQfQzhz+Do\nISC8dvPXIfUQq5etsSSgTM9O4vsNzUvCv8Ss6Jwn2UuqTzCPuYth/XkYaYlK\nrl9y2m+0t2kWJCPQum1riHqs/DbzWyMiN9lpbr9FRtR9akL7ZDt0cWtyHKbe\n5KgcCEUYgYS0OwvyuzBhEnDEiATLGP1XAbIBLsKL+fYydCVtoYe9g4lXmPIJ\nHIfWWk58+u6TR5ALxiR7MXkV1aH0yEHY5CIspgDS99jUbqJvP13cZbLjGISd\n+tHTzepB8+oTmJ7jdNnmUhFVmCDg9UYldkAANz7TbKPNqPEoE2SzAEKtqx6u\npMLMz7vFO1TVXRAaMV7oHZhuCt9Sc390W98IWnb2bYfomAvDKZbFRzLqPBpu\nUr05xrlgQBhIfTyh9V4+lUiHfXwy9PW/P5INizTFwrtuvmTXv8BoJiCkAkO6\nUWzW\r\n=GNTU\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "index.d.ts",
    "src/",
    "dist/"
  ],
  "gitHead": "e24e1506c2604746a5a3869046e6e0fbc3213344",
  "homepage": "https://fauna.com",
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "keywords": [
    "database",
    "fauna",
    "official",
    "driver"
  ],
  "license": "MPL-2.0",
  "lint-staged": {
    "*.{js,css,json,md}": [
      "prettier --write",
      "git add"
    ],
    "*.js": [
      "eslint --fix",
      "git add"
    ]
  },
  "main": "index.js",
  "maintainers": [
    {
      "name": "erickpintor",
      "email": "erickpintor@gmail.com"
    },
    {
      "name": "ryanharris",
      "email": "harrisryan1@gmail.com"
    },
    {
      "name": "fauna-bot",
      "email": "fauna-bot@fauna.com"
    }
  ],
  "name": "faunadb",
  "optionalDependencies": {},
  "readme": "# FaunaDB Javascript Driver\n\n[![CircleCI](https://circleci.com/gh/fauna/faunadb-js.svg?style=svg)](https://circleci.com/gh/fauna/faunadb-js)\n[![Npm Version](https://img.shields.io/npm/v/faunadb.svg?maxAge=21600)](https://www.npmjs.com/package/faunadb)\n[![License](https://img.shields.io/badge/license-MPL_2.0-blue.svg?maxAge=2592000)](https://raw.githubusercontent.com/fauna/faunadb-js/master/LICENSE)\n\n[![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release)\n\nA Javascript driver for [FaunaDB](https://fauna.com).\n\n[View reference JSDocs here](https://fauna.github.com/faunadb-js).\n\nSee the [FaunaDB Documentation](https://docs.fauna.com/) and\n[Tutorials](https://docs.fauna.com/fauna/current/howto/) for guides and\na complete database [API\nreference](https://docs.fauna.com/fauna/current/reference/queryapi/).\n\n## Supported Runtimes\n\nThis Driver supports and is tested on:\n\n- Node.js\n  - LTS\n  - Stable\n- Chrome\n- Firefox\n- Safari\n- Internet Explorer 11\n\n## Using the Client\n\n### Installation\n\n#### Node.js\n\n`npm install --save faunadb`\n\nor\n\n`yarn add faunadb`\n\n#### Browsers\n\nVia CDN:\n\n```html\n<script src=\"//cdn.jsdelivr.net/npm/faunadb@latest/dist/faunadb.js\"></script>\n```\n\nThe minified version of the driver can also be used via CDN:\n\n```html\n<script src=\"//cdn.jsdelivr.net/npm/faunadb@latest/dist/faunadb-min.js\"></script>\n```\n\n### Use\n\nThe [tutorials](https://docs.fauna.com/fauna/current/howto/) in the\nFaunaDB documentation contain other driver-specific examples.\n\n#### Connecting from the browser\n\nTo get up and running quickly, below is a full example for connecting from the browser. Replace <your_key_here> with a database secret. You can get that by visiting your [FaunaDB Dashboard](https://dashboard.fauna.com/), creating a new database, clicking on \"Security\" in the sidebar on the left, and then clicking \"New Key\". To learn more about keys, see [FaunaDB Key System](https://docs.fauna.com/fauna/current/security/keys.html).\n\n```javascript\n<html>\n  <head>\n  </head>\n<body>\n  <h1>Test</h1>\n</body>\n<script src=\"https://cdn.jsdelivr.net/npm/faunadb@latest/dist/faunadb.js\"></script>\n<script type=\"text/javascript\">\n  var faunadb = window.faunadb\n  var q = faunadb.query\n  var client = new faunadb.Client({\n    secret: 'your_key_here',\n    domain: 'db.fauna.com',\n    scheme: 'https',\n  })\n  client.query(\n    q.ToDate('2018-06-06')\n  )\n  .then(function (res) { console.log('Result:', res) })\n  a.catch(function (err) { console.log('Error:', err) })\n</script>\n</html>\n```\n\n#### Requiring the Driver\n\n```javascript\nvar faunadb = require('faunadb'),\n  q = faunadb.query\n```\n\nThis is the recommended require stanza. The `faunadb.query` module contains all\nof the functions to create FaunaDB Query expressions.\n\n#### Instantiating a Client and Issuing Queries\n\n```javascript\nvar client = new faunadb.Client({ secret: 'YOUR_FAUNADB_SECRET' })\n```\n\nOnce the client has been instantiated, it can be used to issue queries. For\nexample, to create an document in an existing collection named `test` with the data:\n`{ testField: 'testValue' }`:\n\n```javascript\nvar createP = client.query(\n  q.Create(q.Collection('test'), { data: { testField: 'testValue' } })\n)\n```\n\nAll methods on `faunadb.Client` return [ES6 Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\nSo, if we wanted to handle the Promise to access the `Ref` of the newly created\ndocument:\n\n```javascript\ncreateP.then(function(response) {\n  console.log(response.ref) // Would log the ref to console.\n})\n```\n\n`response` is a JSON object containing the FaunaDB response. See the JSDocs for\n`faunadb.Client`.\n\n#### Pagination Helpers\n\nThis driver contains helpers to provide a simpler API for consuming paged\nresponses from FaunaDB. See the [Paginate Function Reference](https://docs.fauna.com/fauna/current/reference/queryapi/read/paginate)\nfor a description of paged responses.\n\nUsing the helper to page over sets lets the driver handle cursoring and\npagination state. For example, `client.paginate`:\n\n```javascript\nvar helper = client.paginate(q.Match(q.Index('test_index'), 'example-term'))\n```\n\nThe return value, `helper`, is an instance of `PageHelper`. The `each` method will execute a\ncallback function on each consumed page.\n\n```javascript\nhelper.each(function(page) {\n  console.log(page) // Will log the page's contents, for example: [ Ref(\"collections/test/1234\"), ... ]\n})\n```\n\nNote that `each` returns a `Promise<void>` that is fulfilled on the completion\nof pagination.\n\nThe pagination can be transformed server-side via the FaunaDB query language\nvia the `map` and `filter` functions.\n\nFor example, to retrieve the matched documents:\n\n```javascript\nhelper\n  .map(function(ref) {\n    return q.Get(ref)\n  })\n  .each(function(page) {\n    console.log(page) // Will now log the retrieved documents.\n  })\n```\n\n[See the JSDocs](https://fauna.github.com/faunadb-js/PageHelper.html) for\nmore information on the pagination helper.\n\n#### Timeouts\n\nThe client can be configured to handle timeouts in two different ways:\n\n1. Add a `timeout` field to the `options` block when instantiating the client\n2. By setting a `queryTimeout` on the client (or passing the value to the client's `.query()` method directly)\n\nThe first option (i.e. `timeout`) represents a HTTP timeout on the client side. Defined in seconds, the client will wait the specified period before timing out if it has yet to receive a response.\n\n```javascript\nconst client = new faunadb.Client({\n  secret: 'YOUR_FAUNADB_SECRET',\n  timeout: 100,\n})\n```\n\nOn the other hand, using the client's `queryTimeout` dictates how long FaunaDB will process the request on the server before timing out if it hasn't finished running the operation. This can be done in two different ways:\n\n```javascript\n// 1. Setting the value when instantiating a new client\nconst client = new faunadb.Client({\n  queryTimeout: 2000,\n  secret: 'YOUR_FAUNADB_SECRET',\n})\n\n// 2. Specifying the value per-query\nvar data = client.query(q.Paginate(q.Collections()), {\n  queryTimeout: 100,\n})\n```\n\n**Note:** When passing a `queryTimeout` value to `client.query()` as part of the `options` object, it will take precendence over any value set on the client when instantiating it.\n\n#### Per-query options\n\nSome options (currently only `secret` and `queryTimout`) can be overriden on a per-query basis:\n\n```javascript\nvar createP = client.query(\n  q.Create(q.Collection('test'), { data: { testField: 'testValue' } }),\n  { secret: 'YOUR_FAUNADB_SECRET' }\n)\n```\n\n```javascript\nvar helper = client.paginate(\n  q.Match(q.Index('test_index'), 'example-term'),\n  null,\n  {\n    secret: 'YOUR_FAUNADB_SECRET',\n  }\n)\n```\n\n```javascript\nvar data = client.query(q.Paginate(q.Collections()), {\n  queryTimeout: 100,\n})\n```\n\n#### Custom Fetch\n\nTo use a custom `fetch()` you just have to specify it in the configuration and make it compatible with the [standard Web API Specification of the Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n\n```javascript\nconst customFetch = require('./customFetch')\nconst client = new faunadb.Client({\n  secret: 'YOUR_FAUNADB_SECRET',\n  fetch: customFetch,\n})\n```\n\n## Client Development\n\nRun `yarn` to install dependencies.\n\n### Code\n\nThis project includes no polyfills. Support for Internet Explorer 11 requires\na `Promise` polyfill.\n\n### Testing\n\nThe driver tests need to connect to a FaunaDB so we recommend you setup one locally. The fast way is running a docker image like `docker run --rm --name faunadb -p 8443:8443 fauna/faunadb`.\n\nAfter have the faunadb working on local you have to setup a set of env variables before run the tests. You can set them manually or use a `.env` file for this.\n\n```bash\nFAUNA_DOMAIN=localhost\nFAUNA_SCHEME=http\nFAUNA_PORT=8443\nFAUNA_ROOT_KEY=secret\n```\n\n- `yarn test`: This will run tests against the current version of Node.js.\n  [nvm](https://github.com/creationix/nvm) is useful for managing multiple\n  versions of Node.js for testing.\n\nEach test run will create a new database, and will attempt to clean it up when\ndone. If the tests are cancelled, the test database will not get cleaned up.\nTherefore it is recommended to use a FaunaDB key scoped to an empty parent\ndatabase created for this purpose, rather than your account's root key. This\nwill make cleanup of test databases as easy as removing the parent database.\n\nSee the [FaunaDB Multitenancy\nTutorial](https://docs.fauna.com/fauna/current/howto/multitenant) for\nmore information about nested databases.\n\nAlternatively, tests can be run via a Docker container with\n`FAUNA_ROOT_KEY=\"your-cloud-secret\" make docker-test` (an alternate\nAlpine-based NodeJS image can be provided via `RUNTIME_IMAGE`).\n\n### Documentation\n\n- `yarn doc` will generate JSDoc documentation for the project.\n\n### Previewing upcoming functionality\n\nIf you want to preview unreleased features in your project, you can do so by installing this driver using one of the following methods.\n\n#### 1. Using a git URL\n\nNormally, you would install the latest release of this package using `npm install --save faunadb` or `yarn add faunadb`. To access our latest features, you will need to define this dependency [by using a git URL](https://docs.npmjs.com/files/package.json#dependencies).\n\n1. Open your `package.json` file\n\n2. If you have already installed this driver, you should see the following in your list of dependencies. If not, add it.\n\n```\n\"faunadb\": \"^2.14.1\"\n```\n\n3. Instead of using a version from the npm registry, we'll want to point our `package.json` to the `master` branch of our GitHub repo. To do that, change the `^2.4.1` to `fauna/faunadb-js#master`.\n\n```\n\"faunadb\": \"fauna/faunadb-js#master\"\n```\n\n4. Update your `node_modules` by running `npm install` or `yarn`\n\n#### 2. Using `npm pack`\n\n1. Clone this repo to your local system\n\n```bash\ngit clone https://github.com/fauna/faunadb-js.git\n```\n\n2. Navigate to the cloned repo and open the `package.json`\n\n```bash\ncd faunadb-js\ncode package.json\n```\n\n3. Change the `version` to be semantic. For example, `3.0.0-beta`.\n\n4. Run `npm pack`. This creates a tarball at the root of your project directory which represents the image sent to the NPM registry when publishing.\n\n5. In another project, you can now install the beta from the local image you just created by running:\n\n```bash\nnpm install /path/to/tarball\n```\n\n## License\n\nCopyright 2019 [Fauna, Inc.](https://fauna.com/)\n\nLicensed under the Mozilla Public License, Version 2.0 (the \"License\"); you may\nnot use this software except in compliance with the License. You may obtain a\ncopy of the License at\n\n[http://mozilla.org/MPL/2.0/](http://mozilla.org/MPL/2.0/)\n\nUnless required by applicable law or agreed to in writing, software distributed\nunder the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\nCONDITIONS OF ANY KIND, either express or implied. See the License for the\nspecific language governing permissions and limitations under the License.\n",
  "readmeFilename": "README.md",
  "release": {
    "branches": [
      "master"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/fauna/faunadb-js.git"
  },
  "scripts": {
    "browserify": "browserify index.js --standalone faunadb -o dist/faunadb.js",
    "browserify-min": "browserify index.js --standalone faunadb | terser -c -m --keep-fnames --keep-classnames -o dist/faunadb-min.js",
    "doc": "jsdoc -c ./jsdoc.json",
    "prettify": "prettier --write \"{src,test}/**/*.{js,ts}\"",
    "semantic-release": "semantic-release",
    "test": "jest --env=node --verbose=false ./test"
  },
  "types": "index.d.ts",
  "version": "4.0.0"
}
